#############################ячейка №1 в Google Colab###########################################################
# Установка необходимых библиотек
!pip install flask
!pip install flask-ngrok
!pip install fastapi nest-asyncio pyngrok uvicorn
!pip install pydantic[email]

# Импорт модулей и библиотек
import traceback
import threading

from flask_ngrok import run_with_ngrok
from flask import Flask, jsonify, request, render_template, Response
from pydantic import BaseModel, EmailStr, ValidationError
from enum import Enum
from typing import Union, Optional, List
import os

import sqlite3
import tkinter as tk

#############################ячейка №2 в Google Colab###########################################################
# создаем директорию с шаблонами
!mkdir templates

#############################ячейка №3 в Google Colab###########################################################
# создаем html-страницу добавления заявки
%%writefile templates/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Сервис управления заявками</title>
</head>
<body>
    <h1>Сервис управления заявками</h1>
    <table>
            <tr>
                <td>
                     <a href='/add_app'>Отправить новую заявку</a></td>
                </td>
            </tr>
            <tr>
                <td><a href='/apps'>Смотреть все заявки</a></td>
            </tr>
    </table>
</body>
</html>

#############################ячейка №4 в Google Colab###########################################################
# создаем html-страницу добавления заявки
               #<input type="text" class="form-control" id="course" placeholder="Введите курс" name="course" required>
%%writefile templates/add_app.html
<!DOCTYPE html>
<html>
   <head>
      <title>Отправить заявку</title>
      <meta charset="utf-8">
      <meta name="viewport" content="width=device-width, initial-scale=1">
      <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
      <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
      <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
   </head>
   <body>
      <div class="container mt-3">
         <h2>Отправить заявку</h2>
         <table>
         <tr>
         <td><a href='/'>ГЛАВНАЯ</a></td>
    <td><a href='/apps'>Все заявки</a></td>
    <td><a href='/add_app'>Добавить заявку</a></td>
    </tr>
    </table>
         <form method="POST" action="/add_app">
            <div class="form-group">
               <label for="course">Курс:</label>
  <select id="course" name="course">
    <option value="OAIS">OAIS - Основы Архитектуры и Интеграции </option>
    <option value="TTIS">TTIS - Разработка ТЗ на ИС</option>
    <option value="BUML">BUML - UML Для бизнес-аналитика</option>
  </select>
            </div>
            <div class="form-group">
               <label for="name">Имя:</label>
               <input type="text" class="form-control" id="name" placeholder="Введите имя" name="name" required>
            </div>
            <div class="form-group">
               <label for="email">Email:</label>
               <input type="email" class="form-control" id="email" placeholder="Введите email" name="email">
            </div>
            <div class="form-group">
               <label for="phone">Телефон:</label>
               <input type="text" class="form-control" id="phone" placeholder="Введите телефон" name="phone">
            </div>
            <button type="submit" class="btn btn-primary">Отправить</button>
         </form>
      </div>
   </body>
</html>

#############################ячейка №5 в Google Colab###########################################################
# создаем html-страницу просмотра списка заявок
%%writefile templates/apps.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Все заявки</title>
</head>
<body>
    <h1>Все заявки:</h1>
         <table>
         <tr>
         <td><a href='/'>ГЛАВНАЯ</a></td>
    <td><a href='/apps'>Все заявки</a></td>
    <td><a href='/add_app'>Добавить заявку</a></td>
    </tr>
    </table>
    <table>
        <thead>
            <tr>
                <th>№ (ID)</th>
                <th>Курс (Course)</th>
                <th>Клиент (Name)</th>
                <th>Почта (Email)</th>
                <th>Телефон (Phone)</th>
            </tr>
        </thead>
        <tbody>
            {% for app in apps %}
            <tr>
                <td>{{ app.id }}</td>
                <td>{{ app.course }}</td>
                <td>{{ app.name }}</td>
                <td>{{ app.email }}</td>
                <td>{{ app.phone }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
</body>
</html>

#############################ячейка №6 в Google Colab###########################################################
# Создание экземпляра Flask-приложения

app = Flask(__name__)

# Установка токена для авторизации в ngrok #@param {type:"string"}
auth_token = ".........ваш токен в ngrok................" 
os.system(f"ngrok authtoken {auth_token}")

# Запуск приложения с использованием ngrok
run_with_ngrok(app)

# Создание таблицы в базе данных SQLite
conn = sqlite3.connect('example.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS apps
                (id INTEGER PRIMARY KEY AUTOINCREMENT, course TEXT, name TEXT, email TEXT, phone TEXT)''')
conn.commit()

# Описание моделей данных
class Courses(str, Enum):
    OAIS = 'OAIS'
    TTIS = 'TTIS'
    BUML = 'BUML'

class App(BaseModel):
    course: Courses
    name: Optional[str] = None
    email: Optional[EmailStr] = None
    phone: Optional[str] = None
    id: Optional[int] = None

class Welcome:
    apps: List[App]
    def init(self, apps: List[App]) -> None:
        self.apps = apps

# Функция добавления записи в базу данных
def add_app_to_db(conn, app):
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO apps (course, name, email, phone) VALUES (?, ?, ?, ?)", (app.course, app.name, app.email, app.phone))
        conn.commit()
        # получаем id после вставки записи
        app.id = cursor.lastrowid 
        return app
    except:
        traceback.print_exc()
        conn.rollback()
    finally:
        cursor.close()

# Функция изменения записи в базе данных
def update_app_in_db(conn, app_id, app_data):
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE apps SET course=?, name=?, email=?, phone=? WHERE id=?", (app_data.get('course'), app_data.get('name'), app_data.get('email'), app_data.get('phone'), app_id))
        conn.commit()
        return app_data
    except:
        traceback.print_exc()
        conn.rollback()
    finally:
        cursor.close()

# Функция получения всех записей из базы данных
def get_all_apps_from_db(conn):
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM apps")
        results = cursor.fetchall()
        apps = []
        for row in results:
            app = {"id": row[0], "course": row[1], "name": row[2], "email": row[3], "phone": row[4]}
            apps.append(app)
        return apps
    except:
        traceback.print_exc()
        return 'Ошибка при получении списка заявок из базы данных'
    finally:
        cursor.close()

# Функция получения записи из базы данных по id
def get_app_from_db(conn, app_id):
    cursor = conn.cursor()
    cursor.execute(f"SELECT * FROM apps WHERE id ='{app_id}'")
    result = cursor.fetchone()
    if result:
        app = {"id": result[0], "course": result[1], "name": result[2], "email": result[3], "phone": result[4]}
        return app
    return 'Пользователь не найден'

# Функция удаления записи из базы данных
def delete_app_from_db(conn, app_id):
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM apps WHERE id=?", (app_id,))
        conn.commit()
    except:
        traceback.print_exc()
        conn.rollback()
    finally:
        cursor.close()

# Обработчик запросов по корневому адресу
@app.route('/')
def hello():
    return render_template('index.html')

# Обработчик запросов на получение списка заявок:
@app.route('/apps', methods=['GET'])
def get_apps():
    conn = sqlite3.connect('example.db')
    try:
        apps = get_all_apps_from_db(conn)
        return render_template('apps.html', apps=apps)
    except Exception as e:
        traceback.print_exc()
        return f'Ошибка при получении списка заявок из базы данных: {e}'
    finally:
        conn.close()

# Обработчик добавления новой заявки:
@app.route('/add_app', methods=['POST', 'GET'])
def apps():
    conn = sqlite3.connect('example.db')
    apps = None
    try:
        if request.method == 'POST':
            if request.content_type == 'application/json':
                app_data = request.json
            elif request.form:
                app_data = request.form
            else:
                app_data = request.args
            course = app_data.get('course')
            name = app_data.get('name')
            email = app_data.get('email')
            phone = app_data.get('phone')
            new_app = App(course=course or None, name=name or None, email=email or None, phone=phone or None)
            add_app_to_db(conn, new_app)
            conn.commit()
            apps = get_all_apps_from_db(conn)
            return jsonify(new_app.dict())
        else:
            apps = get_all_apps_from_db(conn)
            return render_template('add_app.html', apps=apps)
    except Exception as e:
        traceback.print_exc()
        if request.method == 'POST':
            return f'Ошибка при добавлении пользователя в базу данных: {e}'
        else:
            return f'Ошибка при получении списка заявок из базы данных: {e}'
    finally:
        conn.close()

# Обработчик изменения заявки по id:
@app.route('/apps/<app_id>', methods=['GET', 'PUT', 'DELETE'])
def apps_op(app_id):
    if request.method == 'GET':
        # Обработчик запросов на получение записи из базы данных по id
        conn = sqlite3.connect('example.db')
        try:
            app = get_app_from_db(conn, app_id)
            if app != 'Пользователь не найден':
                return jsonify(app)
            return 'Пользователь не найден'
        except:
            traceback.print_exc()
            return 'Ошибка при получении заявки из базы данных'
        finally:
            conn.close()
    elif request.method == 'PUT':
        # Обработчик запросов на изменение записи в базе данных
        conn = sqlite3.connect('example.db')
        if request.content_type == 'application/json':
            app_data = request.json
        else:
            app_data = {k: v for k, v in request.args.items() if k in ['course', 'name', 'email', 'phone']}
        try:
            app = get_app_from_db(conn, app_id)
            if app == 'Пользователь не найден':
                return 'Пользователь не найден'
            # Проверяем, были ли введены новые значения полей app
            # Если значение не введено, оставляем прежнее значение из базы данных
            for field in ['course', 'name', 'email', 'phone']:
                if field not in app_data:
                    app_data[field] = app[field]
            update_app_in_db(conn, app_id, app_data)
            updated_app = get_app_from_db(conn, app_id)
            return jsonify(updated_app)
        except:
            traceback.print_exc()
            return 'Ошибка при изменении заявки в базе данных'
        finally:
            conn.close()
    elif request.method == 'DELETE':
        # Обработчик запросов на удаление записи в базе данных
        conn = sqlite3.connect('example.db')
        try:
            delete_app_from_db(conn, app_id)
            return f'Заявка с id {app_id} удалена из базы данных'
        except:
            traceback.print_exc()
            return 'Ошибка при удалении заявки из базы данных'
        finally:
            conn.close()

#Запуск приложения
if __name__ == '__main__':
    app.run()
