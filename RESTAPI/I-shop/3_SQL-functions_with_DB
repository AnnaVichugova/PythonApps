#############################новая ячейка в Google Colab###########################################################
# Строка подключения к БД
global connection_string
connection_string='postgres://user::password@host/database' #сюда вставлять СВОЮ строку подключения к СВОЕЙ БД

# Функция поиска товара из таблицы товаров
def search_product_db(conn, search_product_name, search_product_min_price, search_product_max_price):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    query ="SELECT product.id, product.name, provider.name, product.price, product.quantity FROM product JOIN provider on provider.id=product.provider WHERE TRUE"
    params = []

    if search_product_name:
        query += " AND product.name LIKE %s"
        params.append(search_product_name)
    if search_product_min_price:
        query += " AND product.price >= %s"
        params.append(search_product_min_price)
    if search_product_max_price:
        query += " AND product.price <= %s"
        params.append(search_product_max_price)

    try:
        cursor.execute(query, params)
        results = cursor.fetchall()
        products = [{"id": row[0], "name": row[1], "provider": row[2], "price": row[3], "quantity": row[4]} for row in results]
        return products
    except Exception as e:
        traceback.print_exc()
        return 'Ошибка при получении товаров из базы данных'
    finally:
        cursor.close()

# Функция поиска поставщиков  из таблицы поставщиков
def search_provider_db(conn, search_provider_name, search_provider_phone, search_provider_email, search_provider_address):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    query = "SELECT * FROM provider WHERE TRUE"
    params = []

    if search_provider_name:
        query += " AND provider.name LIKE %s"
        params.append(search_provider_name)
    if search_provider_phone:
        query += " AND provider.phone LIKE %s"
        params.append(search_provider_phone)
    if search_provider_email:
        query += " AND provider.email LIKE %s"
        params.append(search_provider_email)
    if search_provider_address:
        query += " AND provider.address LIKE %s"
        params.append(search_provider_address)
    try:
        cursor.execute(query, params)
        results = cursor.fetchall()
        providers = []
        for row in results:
            Provider = {"id":row[0], "name": row[1], "phone": row[2], "email": row[3], "address": row[4]}
            providers.append(Provider)
        return providers
    except:
        traceback.print_exc()
        return 'Ошибка при получении поставщиков из базы данных'
    finally:
        cursor.close()

# Функция чтения всех клиентов  из таблицы клиентов
def read_customer_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    query = "SELECT customer.id, customer.name, customer.phone, customer_status.name, customer.email FROM customer JOIN customer_status on customer_status.id=customer.status"

    try:
        cursor.execute(query)
        results = cursor.fetchall()
        customers = [{"id":row[0], "name": row[1], "phone": row[2], "status": row[3], "email": row[4]}for row in results]
        return customers
    except:
        traceback.print_exc()
        return 'Ошибка при получении поставщиков из базы данных'
    finally:
        cursor.close()


# Функция поиска клиентов  из таблицы клиентов
def search_customer_db(conn, search_customer_name, search_customer_phone, search_customer_status, search_customer_email):
    cursor = conn.cursor()
    query = "SELECT customer.id, customer.name, customer.phone, customer_status.name, customer.email FROM customer JOIN customer_status on customer_status.id=customer.status WHERE TRUE"
    params = []

    if search_customer_status:
        query += " AND customer.status = %s"
        params.append(search_customer_status)
    if search_customer_name:
        query += " AND customer.name LIKE %s"
        params.append(search_customer_name)
    if search_customer_phone:
        query += " AND customer.phone LIKE %s"
        params.append(search_customer_phone)
    if search_customer_email:
        query += " AND customer.email LIKE %s"
        params.append(search_customer_email)

    try:
        cursor.execute(query, params)
        results = cursor.fetchall()
        customers = [{"id":row[0], "name": row[1], "phone": row[2], "status": row[3], "email": row[4]} for row in results]
        return customers
    except Exception as e:
        traceback.print_exc()
        return f'Ошибка при получении клиентов из базы данных: {e}'
    finally:
        cursor.close()

# Функция поиска заказов из таблицы заказов
def search_order_db(conn, search_order_id, search_order_customer, search_order_status, search_order_ammount_min, search_order_ammount_max, search_order_date):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    query = "SELECT orders.id, customer.name, order_status.name, orders.ammount, orders.date FROM orders JOIN customer on customer.id=orders.customer JOIN order_status on order_status.id=orders.status WHERE TRUE"
    params = []

    if search_order_id:
        query += " AND orders.id = %s"
        params.append(search_order_id)
    if search_order_customer:
        query += " AND customer.name LIKE %s"
        params.append(search_order_customer)
    if search_order_status:
        query += " AND orders.status = %s"
        params.append(search_order_status)
    if search_order_ammount_min:
      query += " AND orders.ammount > %s"
      params.extend([search_order_ammount_min])
    if search_order_ammount_max:
      query += " AND orders.ammount < %s"
      params.extend([search_order_ammount_max])
    if search_order_date:
      query += " AND orders.date BETWEEN %s::date - INTERVAL '30 days' AND %s::date + INTERVAL '30 days'"
      params.extend([search_order_date, search_order_date])

    try:
        cursor.execute(query, params)
        results = cursor.fetchall()
        orders = [{"id":row[0], "customer": row[1], "status": row[2], "ammount": row[3], "date": row[4]} for row in results]
        return orders
    except:
        traceback.print_exc()
        return 'Ошибка при получении заказов из базы данных'
    finally:
        cursor.close()

# Функция получения всех записей из таблицы ролей для регистрации ивхода
def read_role_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM roles")
        results = cursor.fetchall()
        roles = []
        for row in results:
            Role = {"id":row[0], "name": row[1]}
            roles.append(Role)
        return roles
    except:
        traceback.print_exc()
        return 'Ошибка при получении ролей из базы данных'
    finally:
        cursor.close()

# Функция получения всех записей из таблицы товаров для отображения каталога
def read_product_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT product.id, product.name, provider.name, product.price, product.quantity FROM product JOIN provider on provider.id=product.provider ORDER BY product.id DESC")
        results = cursor.fetchall()
        products = []
        for row in results:
            Product = {"id":row[0], "name": row[1], "provider": row[2], "price": row[3], "quantity": row[4]}
            products.append(Product)
        return products
    except:
        traceback.print_exc()
        return 'Ошибка при получении товаров из базы данных'
    finally:
        cursor.close()

# Функция получения всех записей из таблицы заказов для отображения списка
def read_order_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT orders.id, customer.name, order_status.name, orders.ammount, orders.date FROM orders JOIN customer on customer.id=orders.customer JOIN order_status on order_status.id=orders.status ORDER BY orders.id DESC")
        results = cursor.fetchall()
        orders = [{"id":row[0], "customer": row[1], "status": row[2], "ammount": row[3], "date": row[4]} for row in results]
        return orders
    except:
        traceback.print_exc()
        return 'Ошибка при получении заказов из базы данных'
    finally:
        cursor.close()

# Функция получения всех записей из таблицы поставщиков для отображения списка
def read_provider_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT provider.id, provider.name, provider.phone, provider.email, provider.address FROM provider ORDER BY provider.id DESC")
        results = cursor.fetchall()
        providers = []
        for row in results:
            Provider = {"id":row[0], "name": row[1], "phone": row[2], "email": row[3], "address": row[4]}
            providers.append(Provider)
        return providers
    except:
        traceback.print_exc()
        return 'Ошибка при получении поставщиков из базы данных'
    finally:
        cursor.close()

# Функция получения всех записей из таблицы со статусами клиентов для отображения списка
def read_customers_status_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM customer_status")
        results = cursor.fetchall()
        customers_status = []
        for row in results:
            Customer_Status = {"id":row[0], "name": row[1]}
            customers_status.append(Customer_Status)
        return customers_status
    except:
        traceback.print_exc()
        return 'Ошибка при получении поставщиков из базы данных'
    finally:
        cursor.close()


# Функция получения всех записей из таблицы со статусами заказов для отображения списка
def read_order_status_db(conn):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM order_status")
        results = cursor.fetchall()
        orders_status = []
        for row in results:
            Order_Status = {"id":row[0], "name": row[1]}
            orders_status.append(Order_Status)
        return orders_status
    except:
        traceback.print_exc()
        return 'Ошибка при получении поставщиков из базы данных'
    finally:
        cursor.close()


# Функция поиска пользователя в базе данных
def find_user_in_db(conn, login, password, role):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
      cursor.execute("SELECT * FROM users WHERE login = %s AND password = %s AND role=%s::integer", (login, password, role))
      result = cursor.fetchone()
      if result:
        user = {"id": result[0], "login": result[1], "password": result[2], "role": result[3]}
        return user
      else:
        return None
    except:
        traceback.print_exc()
        return 'Ошибка при получении пользователя из базы данных'
    finally:
        cursor.close()

# Функция регистрации пользователя (добавления записи в таблицу users)
def add_user_to_db(conn, user_data):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO users (login, password, role) VALUES (%s, %s, %s::integer)", (user_data['login'], user_data['password'], user_data['role']))
        conn.commit()
        login=user_data['login']
        cursor.execute("SELECT id FROM users WHERE login = %s", (login,))
        id = cursor.fetchone()[0]
        user = {"id": id, "login": user_data['login'], "password": user_data['password'], "role": user_data['role']}
        return user
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()

# Функция генерации JWT-токена
def generate_jwt_token(user_id, role, expiration_minutes):
  if int(role)>1:
    # Задаем время жизни токена
    expiration_time = datetime.utcnow() + timedelta(minutes=expiration_minutes)

    # Создаем словарь с данными пользователя, которые будут включены в токен
    payload = {
        "user_id": user_id,
         "role": role,
        "exp": expiration_time
    }

    # Генерируем JWT токен с помощью секретного ключа
    token = jwt.encode(payload, secret_key, algorithm="HS256")
    return token


# Функция поиска токена в базе данных
def find_token_in_db(conn, sysuser):
  conn = psycopg2.connect(connection_string)
  cursor = conn.cursor()
  try:
    cursor.execute("SELECT token FROM jwts WHERE sysuser = %s::integer", (sysuser,))
    token = cursor.fetchone()
    return token
  except:
        traceback.print_exc()
        return 'Ошибка при получении токена из базы данных'
  finally:
        cursor.close()

# Функция извлечения данных пользователя из токена
def extract_user_data_from_token(token):
    conn = psycopg2.connect(connection_string)
    try:
        roles=read_role_db(conn)
        # Декодируем токен для получения данных пользователя
        decoded_token = jwt.decode(token, secret_key, algorithms=["HS256"])
        user_id = decoded_token["user_id"]
        sysuser = user_id["id"]
        if find_token_in_db(conn, sysuser):
          return decoded_token
    except jwt.exceptions.ExpiredSignatureError:
        print("Время жизни токена истекло, надо снова войти в систему")
        current_role = 1
        menu_word, menu_link = menu(current_role)
        response = make_response(render_template('login.html', roles=roles, menu_word=menu_word, menu_link=menu_link, zip=zip), 401)
        return response
    except jwt.exceptions.DecodeError:
        return None

# Функция записи JWT-токена в таблицу jwts
def add_JWT_to_db(conn, JWTtime, token, sysuser):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO jwts (moment, token, sysuser) VALUES (%s, %s, %s)", (JWTtime, token, sysuser))
        conn.commit()
        return token
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()


# Функция добавления товара в таблицу product
def add_product_to_db(conn, name, provider, price, quantity):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("INSERT INTO product (name, provider, price, quantity) VALUES (%s, %s::integer, %s::decimal, %s::integer)", (name, provider, price, quantity))
        conn.commit()
        cursor.execute("SELECT MAX(id) FROM product")
        id = cursor.fetchone()[0]
        product = {"id":id, "name": name, "provider": provider, "price": price, "quantity": quantity}
        return product
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()

# Функция добавления поставщика в таблицу provider
def add_provider_to_db(conn, name, phone, email, address):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        conn.commit()
        cursor.execute("INSERT INTO provider (name, phone, email, address) VALUES ( %s, %s, %s, %s)", (name, phone, email, address))
        conn.commit()
        cursor.execute("SELECT id FROM provider WHERE name=%s, phone=%s, email=%s, address=%s", (name, phone, email, address))
        id = cursor.fetchone()[0]
        provider = {"id":id, "name": name, "phone": phone, "email": email, "address": address}
        return provider
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()

# Функция поиска поставщика в базе данных
def get_provider_from_db(conn, provider_id):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM provider WHERE id = (%s::integer)", (provider_id,))
        provider_data = cursor.fetchone()
        if provider_data:
            provider = {
                "id": provider_data[0],
                "name": provider_data[1],
                "phone": provider_data[2],
                "email": provider_data[3],
                "address": provider_data[4]
            }
            return provider
        else:
            return None
    except Exception as e:
        traceback.print_exc()
        return None
    finally:
        cursor.close()

# Функция обновления поставщика в базе данных
def update_provider_in_db(conn, id, name, phone, email, address):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE provider SET name = %s, phone = %s, email = %s, address = %s WHERE id = %s::integer", (name, phone, email, address, id))
        conn.commit()
        if cursor.rowcount > 0:
            provider = {
                "id": id,
                "name": name,
                "phone": phone,
                "email": email,
                "address": address
            }
            return provider
        else:
            return None
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()

# Функция удаления поставщика в базе данных
def delete_provider_from_db(conn, provider_id):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM provider WHERE id = (%s::integer)", (provider_id,))
        conn.commit()
        if cursor.rowcount > 0:
            return True
        else:
            return False
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return False
    finally:
        cursor.close()

# Функция поиска товара в базе данных
def get_product_from_db(conn, product_id):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT * FROM product WHERE id = (%s::integer)", (product_id,))
        product_data = cursor.fetchone()
        if product_data:
            product = {
                "id": product_data[0],
                "name": product_data[1],
                "provider": product_data[2],
                "price": product_data[3],
                "quantity": product_data[4]
            }
            return product
        else:
            return None
    except Exception as e:
        traceback.print_exc()
        return None
    finally:
        cursor.close()

# Функция обновления товара в базе данных
def update_product_in_db(conn, id, name, provider, price, quantity):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE product SET name = %s, provider = %s::integer, price = %s::decimal, quantity = %s::integer WHERE id = %s::integer", (name, provider, price, quantity, id))
        conn.commit()
        if cursor.rowcount > 0:
            product = {
                "id": id,
                "name": name,
                "provider": provider,
                "price": price,
                "quantity": quantity
            }
            return product
        else:
            return None
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()

# Функция удаления товара в базе данных
def delete_product_from_db(conn, product_id):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM product WHERE id = (%s::integer)", (product_id,))
        conn.commit()
        if cursor.rowcount > 0:
            return True
        else:
            return False
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return False
    finally:
        cursor.close()


# Функция поиска заказа в базе данных
def get_order_from_db(conn,order_id):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT orders.id, customer.name, order_status.name, orders.ammount, orders.date FROM orders JOIN customer on customer.id=orders.customer JOIN order_status on order_status.id=orders.status WHERE orders.id = (%s::integer)", (order_id,))
        order_data = cursor.fetchone()
        if order_data:
            order = {
                "id": order_data[0],
                "customer": order_data[1],
                "status": order_data[2],
                "ammount": order_data[3],
                "date": order_data[4]
            }
            return order
        else:
            return None
    except Exception as e:
        traceback.print_exc()
        return None
    finally:
        cursor.close()

# Функция поиска клиента в базе данных
def get_customer_from_db(conn,customer_id):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT customer.id, customer.name, customer.phone, customer_status.name, customer.email FROM customer JOIN customer_status on customer_status.id=customer.status WHERE customer.id = (%s::integer)", (customer_id,))
        customer_data = cursor.fetchone()
        if customer_data:
          customer = {
                "id": customer_data[0],
                "name": customer_data[1],
                "phone": customer_data[2],
                "status": customer_data[3],
                "email": customer_data[4]
            }
          return customer
        else:
          return None
    except Exception as e:
        traceback.print_exc()
        return None
    finally:
        cursor.close()

# Функция обновления заказа в базе данных
def update_order_in_db(conn, id, status):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("UPDATE orders SET status = %s::integer WHERE id = (%s::integer)", (status, id))
        conn.commit()
        cursor.execute("SELECT * FROM orders WHERE id = (%s::integer)", (id,))
        order_data = cursor.fetchone()
        if order_data:
            order = {
                "id": order_data[0],
                "customer": order_data[1],
                "status": order_data[2],
                "ammount": order_data[3],
                "date": str(order_data[4])
            }
            return order
        else:
            return None
    except Exception as e:
        traceback.print_exc()
        conn.rollback()
        return None
    finally:
        cursor.close()

# Функция получения помесячной выручки из БД (сумма всех заказов, сгруппированных по месяцам)
def db_read_monthly_income_count(start, finish):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT to_char(orders.date, 'Month') AS mes, SUM(orders.ammount) AS income, COUNT(orders.ammount) AS quantity
            FROM orders
            WHERE EXTRACT(MONTH FROM orders.date) BETWEEN %s::integer AND %s::integer
            GROUP BY mes
            ORDER BY (MIN(orders.date))
        """, (start, finish))
        results = cursor.fetchall()
        return results
    except Exception as e:  # ловить конкретные исключения и сохранять информацию об исключении в переменную 'e'
        traceback.print_exc()
        return 'Ошибка при получении данных из базы данных'
    finally:
        cursor.close() #закрыть курсор, который выполняет запросы
        conn.close()  #закрыть соединение с базой данных

# Функция получения больше всего востребованных товаров из БД (тех товаров во всех заказах, которых купили больше 500 единиц)
def db_read_products_statiscics_count(start, finish):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT product.name AS tovar, SUM(order_product.quantity) AS kolichestvo
            FROM order_product
            JOIN product on product.id=order_product.product
            JOIN orders on orders.id=order_product.order_id
            WHERE (EXTRACT(MONTH FROM orders.date) BETWEEN %s::integer AND %s::integer)
            GROUP BY tovar
            HAVING SUM(order_product.quantity)>500
            ORDER BY kolichestvo
        """, (start, finish))
        results = cursor.fetchall()
        return results
    except Exception as e:  # ловить конкретные исключения и сохранять информацию об исключении в переменную 'e'
        traceback.print_exc()
        return 'Ошибка при получении данных из базы данных'
    finally:
        cursor.close() #закрыть курсор, который выполняет запросы
        conn.close()  #закрыть соединение с базой данных

# Функция получения распределения данных по сумме заказа
def db_read_orders_stat(start, finish):
    conn = psycopg2.connect(connection_string)
    cursor = conn.cursor()
    try:
        cursor.execute("""
            SELECT orders.ammount AS RESULT
            FROM orders
            WHERE EXTRACT(MONTH FROM orders.date) BETWEEN %s::integer AND %s::integer
        """, (start, finish))
        results = cursor.fetchall()
        return results
    except Exception as e:  # ловить конкретные исключения и сохранять информацию об исключении в переменную 'e'
        traceback.print_exc()
        return 'Ошибка при получении данных из базы данных'
    finally:
        cursor.close() #закрыть курсор, который выполняет запросы
        conn.close()  #закрыть соединение с базой данных

def get_analytical_report(conn, start, finish):
        # Создание DataFrame  помесячной выручки и вывод его на экран
    df = pd.DataFrame(db_read_monthly_income_count(start, finish), columns=['МЕСЯЦ', 'ДОХОД', 'КОЛИЧЕСТВО ЗАКАЗОВ'])

    # Создание DataFrame самых востребованных товаров из БД и вывод его на экран
    df2 = pd.DataFrame(db_read_products_statiscics_count(start, finish), columns=['ТОВАР', 'КОЛИЧЕСТВО'])

    # Создание DataFrame суммы заказа и вывод его на экран
    df3 = pd.DataFrame(db_read_orders_stat(start, finish), columns=['RESULT'])

    # Преобразование значений из строки в числовой формат
    df3['RESULT'] = df3['RESULT'].replace('[\$,]', '', regex=True).astype(float)

    # Получаем текущую дату
    current_date = datetime.now()

    # Форматируем дату в строку (например, '2023-03-15')
    date_str = current_date.strftime('%Y-%m-%d-%H-%M-%S')

    # Создание PDF-файла для сохранения графиков и таблиц. В название файла включаем текущую дату
    filename = '/content/static/report_' + date_str + '.pdf'

    pdffile='report_' + date_str + '.pdf'

    # Запись данных в PDF-файл
    with PdfPages(filename) as pdf:
        # Рассчитаем статистику по суммам заказа
        kolvo=len(df3['RESULT']) #количество наблюдений
        df_max = df3['RESULT'].max() #максимум
        df_min=df3['RESULT'].min() #минимум
        df_mean = df3['RESULT'].mean() #среднее значение
        df_sum=df3['RESULT'].sum() #сумма

        # упаковываем статистику в датафрейм для отображения в таблице
        df_stats = pd.DataFrame({
            'Показатель': ['ВСЕГО заказов', 'Максимальный чек', 'Минимальный чек', 'Среднее значение', 'ИТОГО общая сумма дохода'],
            'Значение': [kolvo, df_max, df_min, df_mean, df_sum]
        })

        # Создание фигуры и осей для таблицы
        fig_table, ax_table = plt.subplots(figsize=(8, 3))  # Выберите подходящий размер фигуры

        # Задание заголовка
        ax_table.set_title(f"Статистика по сумме заказов, с {start}-го месяца по {finish}-й месяц")

        # Задание содержимого таблицы со статистикой
        ax_table.axis('tight') #задаем границы области для таблицы так, чтобы они плотно обрамляли содержимое
        ax_table.axis('off') #выключаем отображение осей для таблицы (нет границ и делений)
        table = ax_table.table(cellText=df_stats.values, colLabels=df_stats.columns, loc='center') #задаем содержимое ячеек таблицы, заголовки столбцов и расположение таблицы
        table.set_fontsize(10) #устанавливаем размер шрифта для текста в таблице вручную
        table.scale(1.2, 1.2)  # Можно изменить масштаб таблицы для лучшего отображения

        # Сохранение в pdf и закрытие страницы в файле, чтобы освободить память, связанную с этим объектом Figure в Matplotlib
        pdf.savefig(fig_table)
        plt.close(fig_table)

    # подробности по месячной выручке
        # Создание фигуры и осей для таблицы
        fig_table, ax_table = plt.subplots(figsize=(8, 6))  # Выберите подходящий размер фигуры

        # Задание заголовка
        ax_table.set_title(f"Доходы по месяцам, с {start}-го месяца по {finish}-й месяц")

        # Задание содержимого таблицы со статистикой
        ax_table.axis('tight') # задаем границы области для таблицы так, чтобы они плотно обрамляли содержимое
        ax_table.axis('off') # выключаем отображение осей для таблицы (нет границ и делений)
        table = ax_table.table(cellText=df.values, colLabels=df.columns, loc='center') #задаем содержимое ячеек таблицы, заголовки столбцов и расположение таблицы
        table.set_fontsize(10) # устанавливаем размер шрифта для текста в таблице вручную
        table.scale(1.2, 1.2)  # Можно изменить масштаб таблицы для лучшего отображения

        # Сохранение в pdf и закрытие страницы в файле, чтобы освободить память, связанную с этим объектом Figure в Matplotlib
        pdf.savefig(fig_table)
        plt.close(fig_table)

        # Создание фигуры и осей для гистограммы
        fig_hist, ax_hist = plt.subplots(figsize=(14, 6))  # Выберите подходящий размер фигуры

        # Установим метки на оси X с названиями месяцев
        ax_hist.set_xticks(range(1+len(df['МЕСЯЦ'])))

        # Строим столбики гистограммы
        ax_hist.bar(df['МЕСЯЦ'], df['ДОХОД'], width=0.4, edgecolor="white", label='доход за месяц', linewidth=0.7)

        # Рисуем число заказов
        ax_hist.plot(df['МЕСЯЦ'], 5000*df['КОЛИЧЕСТВО ЗАКАЗОВ'], 'r', label='количество заказов (в масштабе x5000)', linewidth=2.0)

        # Задание содержимого таблицы со статистикой
        ax_hist.set_title(f"Доход от заказов и их количество по месяцам, с {start}-го месяца по {finish}-й месяц")

        #Задание осей гистограммы
        ax_hist.set_xlabel('Месяц')
        ax_hist.set_ylabel('Доход')

        # Добавляем легенду на график
        ax_hist.legend()

        #Сохранение в pdf и закрытие страницы в файле, чтобы освободить память, связанную с этим объектом Figure в Matplotlib
        pdf.savefig(fig_hist)
        plt.close(fig_hist)

        # Создание фигуры и осей для таблицы
        fig_table, ax_table = plt.subplots(figsize=(8, 6))  # Выберите подходящий размер фигуры


    # для самых часто покупаемых товаров

        #Задание заголовка
        ax_table.set_title(f"Самые часто покупаемые товары, с {start}-го месяца по {finish}-й месяц")

        # Проверка наличия данных в df2 перед созданием таблицы
        if not df2.empty:

          # Задание содержимого таблицы со статистикой
          ax_table.axis('tight') #задаем границы области для таблицы так, чтобы они плотно обрамляли содержимое
          ax_table.axis('off') #выключаем отображение осей для таблицы (нет границ и делений)
          table = ax_table.table(cellText=df2.values, colLabels=df2.columns, loc='center') #задаем содержимое ячеек таблицы, заголовки столбцов и расположение таблицы
          #table.auto_set_font_size(True)
          table.set_fontsize(10) #устанавливаем размер шрифта для текста в таблице вручную
          table.scale(1.2, 1.2)  # Можно изменить масштаб таблицы для лучшего отображения

          #Сохранение в pdf и закрытие страницы в файле, чтобы освободить память, связанную с этим объектом Figure в Matplotlib
          pdf.savefig(fig_table)
          plt.close(fig_table)
        else:
            print("Недостаточная выборка для формирования списка самых востребованных товаров")

        # Создание фигуры и осей для круговой диаграммы
        fig_circle, ax_circle = plt.subplots(figsize=(10, 8)) # 10 - ширина, 8 - высота фигуры в дюймах

        #Задание заголовка
        ax_circle.set_title(f"Самые часто покупаемые товары по месяцам, с {start}-го месяца по {finish}-й месяц")

        # Строим круговую диаграмму с отображением данных
        ax_circle.pie(df2['КОЛИЧЕСТВО'], labels=df2['ТОВАР'], autopct='%1.1f%%', startangle=90)

        # Устанавливаем соотношение сторон диаграммы как 1, чтобы круг выглядел как круг, а не эллипс
        plt.axis('equal')

        #Сохранение в pdf и закрытие страницы в файле, чтобы освободить память, связанную с этим объектом Figure в Matplotlib
        pdf.savefig(fig_circle)
        plt.close(fig_circle)

    return pdffile
